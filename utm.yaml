openapi: 3.0.2
info:
  title: UTM API (USS->DSS and USS->USS)
  version: 0.3.12
  description: |-
    Interface definitions for 'Discovery and Synchronization Service' (DSS) and 'UAS Service Supplier (USS).

    DSS functionality includes identification of peer UTM USS instances (managing flight operations and constraints).
    USS functionality includes sharing details of flight operations and constraints.

    Note: Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.

    Whenever a object-type field may be omitted, it may also be set to null for the same effect.

security:
- Authority:
  - utm.strategic_coordination
  - utm.constraint_management
  - utm.constraint_ingestion
  - utm.availability_arbitration

tags:
- name: Operation references
  description: |-
    Endpoints exposed by the DSS for interaction with references to Operations.
- name: Operation details
  description: |-
    Endpoints exposed by USSs for interaction with details of Operations.
- name: Constraint references
  description: |-
    Endpoints exposed by the DSS for interaction with references to Constraints.
- name: Constraint details
  description: |-
    Endpoints exposed by USSs for interaction with details of Constraints.
- name: Subscriptions
  description: |-
    Endpoints exposed by the DSS for interaction with Subscription entities.
- name: Reports
  description: |-
    Endpoints exposed by the DSS for reporting peer DSS issues.
- name: Availability
  description: |-
    Endpoints exposed by the DSS for declaring USS availability.
- name: dss
  description: Endpoints exposed by the DSS server.
- name: p2p_utm
  description: Endpoints exposed by UTM USSs for peer-peer communication.


#
#
#

components:
  securitySchemes:
    Authority:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://token_vendor.com/oauth/token
          scopes:
            utm.strategic_coordination: |-
              Client may perform planning, strategic conflict detection, and conformance monitoring activities.
            utm.constraint_management: |-
              Client may manage (create, edit, and delete) Constraints they own.
            utm.constraint_ingestion: |-
              Client may read Constraint references from the DSS and details from the partner USSs.
            utm.availability_arbitration: |-
              Client may set the availability state of USSs in the DSS.
      description: |-
        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, publish to all providers the public key for verifying that signature, and implement standard OAuth server discovery mechanisms as described in RFC 8414.

        The following fields shall be included in the JWT claim for access tokens issued by this authority:
            * `iss`, with the URL at which the token generation request was received.
            * `exp`, with a time no further than 1 hour in the future.
            * `sub`, with unique ID of the client requesting the access token.
            * `scope`, with a list of space-separated strings (per RFC 6749) indicating the scopes granted.
            * `jti`, according to RFC 7519.

        Following the principle of least privilege, only one of the scopes enumerated in this document shall be granted in a single token (though other scopes may accompany it).  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).

        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.


  schemas:
    UUIDv4Format:
      description: |-
        String whose format matches a version-4 UUID according to RFC 4122.
      maxLength: 36
      minLength: 36
      type: string
      format: uuid
      pattern: >-
        '^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-4[0-9a-fA-F]{3}\\-[8-b][0-9a-fA-F]{3}\\-[0-9a-fA-F]{12}$'
      example: 03e5572a-f733-49af-bc14-8a18bd53ee39

    EntityID:
      description: |-
        Identifier for an Entity communicated through the DSS.  Formatted as
        a UUIDv4.
      anyOf:
      - $ref: '#/components/schemas/UUIDv4Format'
      example: 2f8343be-6482-4d1b-a474-16847e01af1e

    EntityOVN:
      title: EntityOVN
      description: |-
        A token associated with a particular UTM Entity+version created
        by the DSS upon creation or modification of an Entity reference and provided
        to the client creating or modifying the Entity reference.  The EntityOVN
        is stored privately by the DSS and then compared against entries in a Key
        provided to mutate the airspace.  The EntityOVN is also provided by
        the client whenever that client transmits the full information of the Entity
        (either via GET, or via a subscription notification).
      type: string
      minLength: 16
      maxLength: 128
      example: 9d158f59-80b7-4c11-9c0c-8a2b4d936b2d

    SubscriptionID:
      description: |-
        Udentifier for a Subscription communicated through the DSS.  Formatted
        as a UUIDv4.
      anyOf:
      - $ref: '#/components/schemas/UUIDv4Format'
      example: 78ea3fe8-71c2-4f5c-9b44-9c02f5563c6f

    Key:
      description: |
        Proof that a client has obtained the latest airspace content, used to ensure that write
        operations to the DSS occur only when the latest content is known (i.e. has been read). The
        client is required to pass a current Key constructed from information obtained with
        previous read operations and subsequent requests for full information, and optionally,
        subscription updates for deconflicted write operations to the DSS.  The contents of this
        data structure are generated by the client.
      type: array
      items:
        $ref: '#/components/schemas/EntityOVN'
      default: []

    Time:
      required:
      - value
      - format
      type: object
      properties:
        value:
          type: string
          description: RFC3339-formatted time/date string.  The time zone must be
            'Z'.
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        format:
          type: string
          enum:
          - RFC3339

    Radius:
      required:
      - value
      - units
      type: object
      properties:
        value:
          format: float
          description: Distance from the centerpoint of a circular area, along the
            WGS84 ellipsoid.
          type: number
          minimum: 0
          exclusiveMinimum: true
          example: 300.183
        units:
          type: string
          description: FIXM-compatible units.  Only meters ("M") are acceptable for
            UTM.
          enum:
          - M

    Altitude:
      type: object
      required:
      - value
      - reference
      - units
      properties:
        value:
          description: |-
            The numeric value of the altitude. Note that min and max values are
            added as a sanity check. As use cases evolve and more options are
            made available in terms of units of measure or reference systems,
            these bounds should be re-evaluated.
          type: number
          format: double
          minimum: -8000
          exclusiveMinimum: false
          maximum: 100000
          exclusiveMaximum: false
        reference:
          description: |-
            A code indicating the reference for a vertical distance. See AIXM 5.1
            and FIXM 4.2.0. Currently, UTM only allows WGS84 with no immediate
            plans to allow other options. FIXM and AIXM allow for 'SFC' which is
            equivalent to AGL.
          type: string
          enum:
          - W84
        units:
          description: |-
            The reference quantities used to express the value of altitude. See
            FIXM 4.2. Currently, UTM only allows meters with no immediate plans
            to allow other options.
          type: string
          enum:
          - M

    Latitude:
      description: Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      format: double
      example: 34.123

    Longitude:
      description: Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      minimum: -180
      exclusiveMaximum: false
      maximum: 180
      exclusiveMinimum: false
      type: number
      format: double
      example: -118.456

    Polygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
      - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'

    LatLngPoint:
      description: Point on the earth's surface.
      required:
      - lat
      - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'

    Circle:
      description: |-
        A circular area on the surface of the earth.
      type: object
      properties:
        center:
          $ref: '#/components/schemas/LatLngPoint'
        radius:
          $ref: '#/components/schemas/Radius'

    Volume3D:
      description: |-
        A three-dimensional geographic volume consisting of a vertically-extruded shape.  Exactly
        one outline must be specified.
      type: object
      properties:
        outline_circle:
          anyOf:
          - $ref: '#/components/schemas/Circle'
          description: A circular geographic shape on the surface of the earth.
        outline_polygon:
          anyOf:
          - $ref: '#/components/schemas/Polygon'
          description: A polygonal geographic shape on the surface of the earth.
        altitude_lower:
          description: Minimum bounding altitude of this volume. Must be less than
            altitude_upper, if specified.
          anyOf:
          - $ref: '#/components/schemas/Altitude'
        altitude_upper:
          description: Maximum bounding altitude of this volume. Must be greater than
            altitude_lower, if specified.
          anyOf:
          - $ref: '#/components/schemas/Altitude'

    Volume4D:
      description: Contiguous block of geographic spacetime.
      required:
      - volume
      type: object
      properties:
        volume:
          $ref: '#/components/schemas/Volume3D'
        time_start:
          description: Beginning time of this volume. Must be before time_end.
          anyOf:
          - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of this volume. Must be after time_start.
          anyOf:
          - $ref: '#/components/schemas/Time'

    ErrorResponse:
      description: |-
        Human-readable string returned when an error occurs
        as a result of a USS - DSS transaction.
      type: object
      properties:
        message:
          description: |-
            Human-readable message indicating what error occurred and/or why.
          type: string
          example: The error occurred because [...]

    SubscriptionState:
      description: |-
        State of Subscription which is causing a notification to be sent.
      required:
      - subscription_id
      - notification_index
      type: object
      properties:
        subscription_id:
          $ref: '#/components/schemas/SubscriptionID'
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'

    SubscriberToNotify:
      description: |-
        Subscriber to notify of a change in the airspace.  This is provided by the DSS
        to a client changing the airspace, and it is the responsibility of that client
        to send a notification to the specified USS according to the change made to the
        airspace.
      required:
      - subscriptions
      - uss_base_url
      type: object
      properties:
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'

    Subscription:
      description: |-
        Specification of a geographic area that a client is interested
        in on an ongoing basis (e.g., "planning area").
      required:
      - id
      - version
      - notification_index
      - uss_base_url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SubscriptionID'
        version:
          description: |-
            Version that the DSS changes every time a USS changes the Subscription.  The DSS
            incrementing the notification_index does not constitute a change that triggers a
            new version.  A USS must specify this version when modifying an existing
            Subscription to ensure consistency in read-modify-write operations and distributed
            systems.
          type: string
        notification_index:
          $ref: '#/components/schemas/SubscriptionNotificationIndex'
        time_start:
          description: |-
            If set, this subscription will not receive notifications involving airspace changes
            entirely before this time.
          anyOf:
          - $ref: '#/components/schemas/Time'
        time_end:
          description: |-
            If set, this subscription will not receive notifications involving airspace changes
            entirely after this time.
          anyOf:
          - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operations:
          description: If true, trigger notifications when Operations are created,
            updated, or deleted.  Otherwise, changes in Operations should not trigger
            notifications.
          type: boolean
          default: false
        notify_for_constraints:
          description: If true, trigger notifications when Constraints are created,
            updated, or deleted.  Otherwise, changes in Constraints should not trigger
            notifications.
          type: boolean
          default: false
        implicit_subscription:
          description: |-
            True if this Subscription was implicitly created by the DSS via the creation of an
            Operation, and should therefore be deleted by the DSS when that Operation is deleted.
          type: boolean
          default: false
        dependent_operations:
          description: List of IDs for Operations that are dependent on this Subscription.
          type: array
          items:
            $ref: '#/components/schemas/EntityID'
          default: []

    SubscriptionNotificationIndex:
      format: int32
      description: Tracks the notifications sent for a subscription so the subscriber
        can detect missed notifications more easily.
      type: integer
      minimum: 0
      exclusiveMinimum: false
      default: 0

    SearchSubscriptionParameters:
      description: |-
        Parameters for a request to find Subscriptions matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchSubscriptionsResponse:
      description: Response to DSS query for subscriptions in a particular geographic
        area.
      required:
      - subscriptions
      type: object
      properties:
        subscriptions:
          description: Subscriptions that overlap the specified geographic area.
          type: array
          items:
            $ref: '#/components/schemas/Subscription'
          default: []

    GetSubscriptionResponse:
      description: Response to DSS request for the subscription with the given id.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    PutSubscriptionParameters:
      description: |-
        Parameters for a request to create/update a subscription in the DSS.  At least one form of
        notifications must be requested.
      required:
      - extents
      - uss_base_url
      type: object
      properties:
        extents:
          description: |-
            Spacetime extents of the volume to subscribe to.

            This subscription will automatically be deleted after its end time if it has not been
            refreshed by then. If end time is not specified, the value will be chosen automatically
            by the DSS. If start time is not specified, it will default to the time the request is
            processed. The end time may not be in the past.

            Note that some Entities triggering notifications may lie entirely outside the requested
            area.
          anyOf:
          - $ref: '#/components/schemas/Volume4D'
        uss_base_url:
          $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_operations:
          description: If true, trigger notifications when Operations are created,
            updated, or deleted.  Otherwise, changes in Operations should not trigger
            notifications.
          type: boolean
          default: false
        notify_for_constraints:
          description: If true, trigger notifications when Constraints are created,
            updated, or deleted.  Otherwise, changes in Constraints should not trigger
            notifications.
          type: boolean
          default: false

    SubscriptionUssBaseURL:
      description: |-
        The base URL of a USS implementation of the parts of the USS-USS API necessary for
        receiving the notifications requested by this Subscription.
      anyOf:
      - $ref: '#/components/schemas/UssBaseURL'

    PutSubscriptionResponse:
      description: |-
        Response for a request to create or update a subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'
        operation_references:
          description: |-
            Operations in or near the subscription area at the time of creation/update,
            if `notify_for_operations` is true.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
          default: []
        constraint_references:
          description: |-
            Constraints in or near the subscription area at the time of creation/update,
            if `notify_for_constraints` is true.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []

    DeleteSubscriptionResponse:
      description: Response for a successful request to delete an Subscription.
      required:
      - subscription
      type: object
      properties:
        subscription:
          $ref: '#/components/schemas/Subscription'

    UssBaseURL:
      description: |-
        The base URL of a USS implementation of part or all of the USS-USS API. Per the USS-USS API, the full URL
        of a particular resource can be constructed by appending, e.g., `/uss/v1/{resource}/{id}` to this base URL.
        Accordingly, this URL may not have a trailing '/' character.
      type: string
      example: https://utm_uss.com/utm

    OperationState:
      description: |-
        State of an Operation.

        'Accepted': This Operation was fully deconflicted from other Entities at the time it changed to this
        state, but no aircraft associated with it are active yet.  The create or update request for this
        Operation reference must include a Key containing all OVNs for all relevant Entities.

        'Activated': One or more aircraft associated with this Operation are, or will imminently be, in
        flight.  The create or update request for this Operation reference must include a Key containing
        all OVNs for all relevant Entities.

        'NonConforming': This Operation is outside of the planned volume.  The new or updated volumes MUST
        contain the actual position of the aircraft.  In this state, the `/uss/v1/operations/{entityid}/telemetry'
        USS-USS endpoint should respond, if available, to queries from USS peers.  The create or update request
        for this Operation may omit a Key in this case because the Operation is being adjusted as flown and
        cannot necessarily deconflict.

        'Contingent': This Operation is executing a contingency action, either because it has been
        NonConforming for a certain period of time, or because of operator initiation.  This state must
        transition to Ended.  The new or updated volumes MUST contain the actual position of the aircraft.
        In this state, the `/uss/v1/operations/{entityid}/telemetry' USS-USS endpoint should respond, if available,
        to queries from USS peers.  The create or update request for this Operation may omit a Key in this
        case because the Operation is being adjusted as flown and cannot necessarily deconflict.
      type: string
      enum:
      - Accepted
      - Activated
      - NonConforming
      - Contingent

    OperationReference:
      description: |-
        The high-level information of a planned or active Operation with the URL
        of a USS to query for details.  Note: 'OVN' is returned ONLY to the USS that
        created the Operation but NEVER to other USS instances.
      required:
      - id
      - owner
      - uss_availability
      - version
      - state
      - time_start
      - time_end
      - uss_base_url
      - subscription_id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityID'
        owner:
          type: string
          example: uss1
          description: |-
            Created by the DSS based on creating client's ID (via access token).  Used internal
            to the DSS for restricting mutation and deletion operations to owner.  Used by USSs
            to reject Operation update notifications originating from a USS that does not own
            the Operation.
        uss_availability:
          $ref: '#/components/schemas/UssAvailabilityState'
        version:
          type: integer
          format: int32
          example: 1
          description: |-
            Numeric version of this Operation which increments upon each change in the Operation,
            regardless of whether any field of the Operation reference changes.  A USS with the
            details of this Operation when it was at a particular version does not need to retrieve
            the details again until the version changes.
        state:
          $ref: '#/components/schemas/OperationState'
        ovn:
          description: |-
            Opaque version number of this Operation.  Populated only when the OperationReference
            is owned by the USS retrieving or providing it.  Not populated when the
            OperationReference is not owned by the USS retrieving or providing it (instead, the
            USS must obtain the OVN from the details retrieved from the owning USS).
          anyOf:
          - $ref: '#/components/schemas/EntityOVN'
        time_start:
          description: Beginning time of Operation.
          anyOf:
          - $ref: '#/components/schemas/Time'
        time_end:
          description: End time of Operation.
          anyOf:
          - $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/OperationUssBaseURL'
        subscription_id:
          description: |-
            The ID of the Subscription that is ensuring the Operation owner receives relevant
            airspace updates.
          anyOf:
          - $ref: '#/components/schemas/SubscriptionID'

    OperationUssBaseURL:
      description: |-
        The base URL of a USS implementation that implements the parts of the USS-USS API necessary for
        providing the details of this Operation, and telemetry during non-conformance or contingency,
        if applicable.
      anyOf:
      - $ref: '#/components/schemas/UssBaseURL'

    PutOperationReferenceParameters:
      description: |-
        Parameters for a request to create an OperationReference in the DSS.
        A subscription to changes overlapping this volume may be implicitly created, but
        this can be overridden by providing the (optional) 'subscription_id' to use.
        Note: The implicit subscription is managed by the DSS, not the USS.
      required:
      - extents
      - state
      - uss_base_url
      type: object
      properties:
        extents:
          description: |-
            Spacetime extents that bound this Operation.

            Start and end times, as well as lower and upper altitudes, are required for each
            volume. The end time may not be in the past.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          minItems: 1
        key:
          description: |-
            Proof that the USS creating or mutating this Operation was aware of the current state of the
            airspace, with the expectation that this Operation is therefore deconflicted from all relevant
            features in the airspace.  This field is not required when declaring an Operation NonConforming
            or Contingent, or when there are no relevant Entities in the airspace, but is otherwise required.
            OVNs for Constraints are required if and only if the USS owning this Operation is considering
            Constraints, which is determined by whether the Subscription associated with this Operation
            triggers notifications for Constraints.  The key does not need to contain the OVN for an
            Operation being updated.
          anyOf:
          - $ref: '#/components/schemas/Key'
        state:
          $ref: '#/components/schemas/OperationState'
        uss_base_url:
          $ref: '#/components/schemas/OperationUssBaseURL'
        subscription_id:
          description: |-
            The ID of an existing Subscription that the USS will use to keep the operator informed about
            updates to relevant airspace information.  If this field is not provided, then the
            `new_subscription` field must be provided in order to provide notification capability
            for the Operation.  The Subscription specified by this ID must cover at least the area over
            which this Operation is conducted, and it must provide notifications for Operations.
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        new_subscription:
          description: |-
            If an existing Subscription is not specified in `subscription_id`, then this field must be
            populated.  When this field is populated, an implicit Subscription will be created and
            associated with this Operation, and will generally be deleted automatically upon the
            deletion of this Operation.
          anyOf:
          - $ref: '#/components/schemas/ImplicitSubscriptionParameters'

    ImplicitSubscriptionParameters:
      description: |-
        Information necessary to create a Subscription to serve a single Operation's notification needs.
      type: object
      required:
      - uss_base_url
      properties:
        uss_base_url:
          description: |-
            The base URL of a USS implementation of the parts of the USS-USS API necessary for
            receiving the notifications that the Operation must be aware of.  This includes, at least,
            notifications for relevant changes in Operations.
          anyOf:
          - $ref: '#/components/schemas/SubscriptionUssBaseURL'
        notify_for_constraints:
          description: |-
            True if this Operation's Subscription should trigger notifications when Constraints change.  Otherwise, changes in Constraints should not trigger notifications.
          type: boolean
          default: false

    GetOperationReferenceResponse:
      description: |-
        Response to DSS request for the OperationReference with the given ID.
      required:
      - operation_reference
      type: object
      properties:
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    ChangeOperationReferenceResponse:
      description: |-
        Response to a request to create, update, or delete an OperationReference
        in the DSS.
      required:
      - subscribers
      - operation_reference
      type: object
      properties:
        subscribers:
          description: |-
            DSS subscribers that this client now has the obligation to
            notify of the Operation changes just made.  This client must call POST
            for each provided URL according to the USS-USS `/uss/v1/operations/{entityid}`
            path API.  The client's own Subscriptions will also be included in this list.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        operation_reference:
          $ref: '#/components/schemas/OperationReference'

    SearchOperationReferenceParameters:
      description: |-
        Parameters for a request to find OperationReferences matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchOperationReferenceResponse:
      description: Response to DSS query for OperationReferences in an area of interest.
      required:
      - operation_references
      type: object
      properties:
        operation_references:
          description: OperationReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
          default: []

    ConstraintReference:
      description: A ConstraintReference (area in which a Constraint is present, along
        with other high-level information, but no details).  The DSS reports only
        these references and clients must exchange details and additional information
        peer-to-peer.
      required:
      - id
      - owner
      - uss_availability
      - version
      - time_start
      - time_end
      - uss_base_url
      type: object
      properties:
        id:
          $ref: '#/components/schemas/EntityID'
        owner:
          type: string
          example: uss1
          description: |-
            Created by the DSS based on creating client's ID (via access token).  Used internal
            to the DSS for restricting mutation and deletion operations to owner.  Used by USSs
            to reject Constraint update notifications originating from a USS that does not own
            the Constraint.
        uss_availability:
          $ref: '#/components/schemas/UssAvailabilityState'
        version:
          type: integer
          format: int32
          example: 1
          description: |-
            Numeric version of this Constraint which increments upon each change in the Constraint,
            regardless of whether any field of the Constraint reference changes.  A USS with the
            details of this Constraint when it was at a particular version does not need to retrieve
            the details again until the version changes.
        ovn:
          description: |-
            Opaque version number of this Constraint.  Populated only when the ConstraintReference
            is owned by the USS retrieving or providing it.  Not populated when the
            ConstraintReference is not owned by the USS retrieving or providing it (instead, the
            USS must obtain the OVN from the details retrieved from the owning USS).
          anyOf:
          - $ref: '#/components/schemas/EntityOVN'
        time_start:
          $ref: '#/components/schemas/Time'
        time_end:
          $ref: '#/components/schemas/Time'
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'

    ConstraintUssBaseURL:
      description: |-
        The base URL of a USS implementation that implements the parts of the USS-USS API necessary for
        providing the details of this Constraint.
      anyOf:
      - $ref: '#/components/schemas/UssBaseURL'

    PutConstraintReferenceParameters:
      description: Parameters for a request to create/update a ConstraintReference
        in the DSS.
      required:
      - extents
      - uss_base_url
      type: object
      properties:
        extents:
          description: |-
            Spacetime extents that bound this Constraint.

            The end time may not be in the past.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          minItems: 1
        uss_base_url:
          $ref: '#/components/schemas/ConstraintUssBaseURL'

    GetConstraintReferenceResponse:
      description: Response to DSS request for the ConstraintReference with the given
        ID.
      required:
      - constraint_reference
      type: object
      properties:
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    ChangeConstraintReferenceResponse:
      description: Response to a request to create, update, or delete a ConstraintReference.
        in the DSS.
      required:
      - subscribers
      type: object
      properties:
        subscribers:
          description: DSS subscribers that this client now has the obligation to
            notify of the Constraint changes just made.  This client must call POST
            for each provided URL according to the USS-USS `/uss/v1/constraints/{entityid}`
            path API.  The client's own Subscriptions will also be included in this
            list.
          type: array
          items:
            $ref: '#/components/schemas/SubscriberToNotify'
          default: []
        constraint_reference:
          $ref: '#/components/schemas/ConstraintReference'

    SearchConstraintReferenceParameters:
      description: |-
        Parameters for a request to find ConstraintReferences matching the provided criteria.
      type: object
      properties:
        area_of_interest:
          $ref: '#/components/schemas/Volume4D'

    SearchConstraintReferencesResponse:
      description: Response to DSS query for ConstraintReferences in an area of interest.
      required:
      - constraint_references
      type: object
      properties:
        constraint_references:
          description: ConstraintReferences in the area of interest.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []

    AirspaceConflictResponse:
      description: Data provided when an airspace conflict was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
        missing_operations:
          description: List of Operation references for which current proof of knowledge
            was not provided.  If this field is present and contains elements, the
            calling USS should query the details URLs for these Operations to obtain
            their details and correct OVNs.  The OVNs can be used to update the key,
            at which point the USS may retry this call.
          type: array
          items:
            $ref: '#/components/schemas/OperationReference'
          default: []
        missing_constraints:
          description: List of Constraint references for which current proof of knowledge
            was not provided.  If this field is present and contains elements, the
            calling USS should query the details URLs for these Constraints to obtain
            their details and correct OVNs.  The OVNs can be used to update the key,
            at which point the USS may retry this call.
          type: array
          items:
            $ref: '#/components/schemas/ConstraintReference'
          default: []

    #
    # USS-USS schema components
    #
    OperationDetails:
      description: |-
        Details of a UTM Operation. Note that this data is not stored in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: |-
            Volumes that wholly contain the Operation while being as small as practical.

            Start and end times, as well as lower and upper altitudes, are required for each
            volume. The end time may not be in the past.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        priority:
          $ref: '#/components/schemas/Priority'

    Priority:
      description: |-
        Ordinal priority of the Operation, as defined by the regulator.  Operations with lesser
        values are lower priority than all Operations with greater values.  A lower-priority
        Operation may not create a conflict with a higher-priority Operation.  A higher-priority
        Operation may create a conflict with a lower-priority Operation.  The regulator specifies
        whether an Operation may create a conflict with other Operations of the same priority.
      type: integer
      default: 0

    Operation:
      description: Full description of a UTM Operation.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/OperationReference'
        details:
          $ref: '#/components/schemas/OperationDetails'

    PutOperationDetailsParameters:
      description: |-
        Parameters of a message informing of detailed information for a peer Operation.
        Pushed (by a client, not the DSS) directly to clients with subscriptions when
        another client makes a change to airspace within a cell with a subscription.
      required:
      - operation_id
      - subscriptions
      type: object
      properties:
        operation_id:
          description: ID of Operation that has changed.
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        operation:
          description: |-
            Full information about the Operation that has changed.  If this field is omitted,
            the Operation was deleted.  The `ovn` field in the nested `reference` must be
            populated.
          anyOf:
          - $ref: '#/components/schemas/Operation'
        subscriptions:
          type: array
          description: Subscription(s) prompting this notification.
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1

    GetOperationDetailsResponse:
      description: Response to peer request for the details of Operation with the
        given ID.
      required:
      - operation
      type: object
      properties:
        operation:
          $ref: '#/components/schemas/Operation'

    ConstraintDetails:
      description: Details of a UTM Constraint. Note that this data is not stored
        in the DSS; only with the clients.
      required:
      - volumes
      type: object
      properties:
        volumes:
          description: |-
            Volumes that wholly contain the Constraint while being as small as practical.

            The end time may not be in the past.
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
        type:
          description: |-
            Type of airspace feature this Constraint represents. A no-fly Constraint is represented
            with "NoFly".
          type: string
          example: NonUTMAircraftOperations
        geozone:
          description: If this Constraint is an ED-269 compliant geo zone, the details
            about that geo zone.
          allOf:
          - $ref: '#/components/schemas/GeoZone'

    Constraint:
      description: Full specification of a UTM Constraint.
      required:
      - reference
      - details
      type: object
      properties:
        reference:
          $ref: '#/components/schemas/ConstraintReference'
        details:
          $ref: '#/components/schemas/ConstraintDetails'

    PutConstraintDetailsParameters:
      description: Parameters of a message informing of new full information for a
        Constraint.  Pushed (by a client, not the DSS) directly to clients with subscriptions
        when another client makes a change to airspace within a cell with a subscription.
      required:
      - constraint_id
      - subscriptions
      type: object
      properties:
        constraint_id:
          description: ID of Constraint that has changed.
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        constraint:
          description: |-
            Full information about the Constraint that has changed.  If this field is omitted,
            the Constraint was deleted.  The `ovn` field in the nested `reference` must be
            populated.
          anyOf:
          - $ref: '#/components/schemas/Constraint'
        subscriptions:
          description: Subscription(s) prompting this notification.
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionState'
          minItems: 1

    GetConstraintDetailsResponse:
      description: |-
        Response to peer request for the details of Operation with the given ID.
      required:
      - constraint
      type: object
      properties:
        constraint:
          $ref: '#/components/schemas/Constraint'

    GetOperationTelemetryResponse:
      description: Response to a peer request for telemetry of an off-nominal Operation.
      required:
      - telemetry
      type: object
      properties:
        operation_id:
          description: ID of the Operation which the vehicle reporting telemetry is
            flying.
          anyOf:
          - $ref: '#/components/schemas/EntityID'
        telemetry:
          $ref: '#/components/schemas/VehicleTelemetry'

    VehicleTelemetry:
      description: Vehicle position, altitude, and velocity.
      required:
      - time_measured
      type: object
      properties:
        time_measured:
          $ref: '#/components/schemas/Time'
        position:
          $ref: '#/components/schemas/Position'
        velocity:
          $ref: '#/components/schemas/Velocity'

    PositionAccuracyVertical:
      description: |-
        Vertical error that is likely to be present in this reported position.
        This is the GVA enumeration from ADS-B, plus some finer values for UAS.
      type: string
      enum:
      - VAUnknown
      - VA150mPlus
      - VA150m
      - VA45m
      - VA25m
      - VA10m
      - VA3m
      - VA1m

    PositionAccuracyHorizontal:
      description: |-
        Horizontal error that is likely to be present in this reported position.
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAS.
      type: string
      enum:
      - HAUnknown
      - HA10NMPlus
      - HA10NM
      - HA4NM
      - HA2NM
      - HA1NM
      - HA05NM
      - HA03NM
      - HA01NM
      - HA005NM
      - HA30m
      - HA10m
      - HA3m
      - HA1m

    Position:
      description: |-
        Location of the vehicle (UAS) as reported for UTM.
        Note: 'accuracy' values are required when extrapolated field is true
        and always in the entry for the current state.
      type: object
      properties:
        longitude:
          $ref: '#/components/schemas/Longitude'
        latitude:
          $ref: '#/components/schemas/Latitude'
        accuracy_h:
          $ref: '#/components/schemas/PositionAccuracyHorizontal'
        accuracy_v:
          $ref: '#/components/schemas/PositionAccuracyVertical'
        extrapolated:
          description: |-
            True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.
            Assumed false if not specified.
          type: boolean
          default: false
        altitude:
          $ref: '#/components/schemas/Altitude'

    Velocity:
      required:
      - speed
      - units_speed
      type: object
      properties:
        speed:
          format: float
          type: number
          description: |-
            Ground speed in meters/second.
          example: 200.1
        units_speed:
          type: string
          enum:
          - MetersSecond
        track:
          format: float
          type: number
          description: |-
            Direction of flight expressed as a "True North-based" ground track angle.
            This value is provided in degrees East of North with a minimum resolution of 1 degree.
          example: 120

    UssAvailabilityStatus:
      type: object
      required:
      - uss
      - availability
      properties:
        uss:
          type: string
          description: |-
            Client ID (matching their `sub` in access tokens) of the USS to which this availability applies.
        availability:
          $ref: '#/components/schemas/UssAvailabilityState'

    UssAvailabilityState:
      type: string
      enum:
      - Unknown
      - Normal
      - Down
      description: |-
        A USS is presumed to be in the Unknown state absent indication otherwise by a USS with
        availability arbitration scope.  Upon determination via availability arbitration, a USS is
        Down when it does not respond appropriately, and a Down USS may not perform the following
        operations in the DSS:
          * Create an Operation in the Accepted or Activated states
          * Modify an Operation whose new or unchanged state is Accepted or Activated
          * Delete an Operation
        A USS in the Unknown state possesses all the capabilities, within the DSS, of a USS in the
        Normal state.

    SetUssAvailabilityStatusParameters:
      type: object
      required:
      - old_version
      - availability
      properties:
        old_version:
          type: string
          default: ''
          description: |-
            Version of USS's availability to change, for consistent read-modify-write operations and consistent retry behavior.
        availability:
          $ref: '#/components/schemas/UssAvailabilityState'

    UssAvailabilityStatusResponse:
      type: object
      required:
      - availability
      - version
      properties:
        version:
          type: string
          description: |-
            Current version of USS's availability.  Used to change USS's availability.
        status:
          $ref: '#/components/schemas/UssAvailabilityStatus'

    ExchangeRecord:
      type: object
      description: Details of a request/response data exchange.
      required:
      - url
      - method
      - headers
      - request_source
      - request_time
      properties:
        url:
          type: string
          description: Full URL of request.
        method:
          type: string
          description: HTTP verb used by requestor (e.g., "PUT," "GET," etc.).
        headers:
          description: |-
            Set of headers associated with request or response. Requires 'Authorization:' field (at a minimum)
          type: array
          items:
            type: string
          default: []
        recorder_role:
          type: string
          description: |-
            A coded value that indicates the requesting USS: 'LOCAL' (this USS) or 'REMOTE' (peer USS)
          enum:
          - Client
          - Server
        request_time:
          description: The time at which the request was sent/received.
          allOf:
          - $ref: '#/components/schemas/Time'
        request_body:
          description: Base64-encoded body content sent/received as a request.
          type: string
          default: ''
        response_time:
          description: The time at which the response was sent/received.
          allOf:
          - $ref: '#/components/schemas/Time'
        response_body:
          type: string
          default: ''
          description: Base64-encoded body content sent/received in response to request.
        response_code:
          type: integer
          format: int32
          default: 0
          description: HTTP response code sent/received in response to request.

    ErrorReport:
      type: object
      description: A report informing a server of a communication problem.
      required:
      - exchange
      - problem
      properties:
        report_id:
          type: string
          maxLength: 128
          description: ID assigned by the server receiving the report.  Not populated
            when submitting a report.
        exchange:
          allOf:
          - $ref: '#/components/schemas/ExchangeRecord'
          description: The request (by this USS) and response associated with the error.
        problem:
          type: string
          description: Human-readable description of the problem with the response.

    PositionRecord:
      type: object
      description: |-
        A record of vehicle telemetry information received by this USS (typically for conformance monitoring).
      required:
      - time_received
      - telemetry
      properties:
        time_received:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: |-
            Time that this position data was received by the (local) USS
        telemetry:
          $ref: '#/components/schemas/VehicleTelemetry'

    OperationRecord:
      type: object
      description: |-
        A record of position data gathered through the course of an operation
      required:
      - operation_id
      properties:
        positions:
          type: array
          items:
            $ref: '#/components/schemas/PositionRecord'
          default: []
        operation_id:
          description: ID of the Operation associated with 'positions'
          allOf:
          - $ref: '#/components/schemas/EntityID'

    PlanningRecord:
      type: object
      description: |-
        A record of a single attempt to (successfully or unsuccessfully) create an Operational Intent.
      required:
      - time
      - ovns
      - problem
      properties:
        time:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time that this planning event occurred
        ovns:
          description: |-
            OVNs the planning USS was aware of when it was planning the (ultimately unsuccessful) operation
          type: array
          default: []
          items:
            $ref: '#/components/schemas/EntityOVN'
        missing_operations:
          description: |-
            List of missing Operations (for planning attempts that were denied by the DSS with code 409)
          type: array
          items:
            $ref: '#/components/schemas/EntityID'
          default: []
        missing_constraints:
          description: |-
            List of missing Constraints (for planning attempts that were denied by the DSS with code 409)
          type: array
          items:
            $ref: '#/components/schemas/EntityID'
          default: []
        operation_id:
          description: ID of the Operation being planned
          allOf:
          - $ref: '#/components/schemas/EntityID'
        problem:
          type: string
          description: |-
            A free text description of the problem(s) encountered during this planning attempt.

    UserNotificationRecord:
      type: object
      description: |-
        User notification record.
      required:
      - notification_triggering_event
      properties:
        triggering_event_time:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time of the notification triggering event
        notification_time:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time at which the user was notified
        notification_details:
          type: string
          description: |-
            Description of information that was provided to the user, as per the referenced triggering_event requirement
        notification_triggering_event:
          type: string
          description: |-
            Requirement ID that pertains to the given notification
          enum:
          - GEN0100
          - GEN0105
          - TEMP_SCD0040
          - TEMP_SCD0075
          - TEMP_CNFM0030
          - TEMP_CONP0020
          - TEMP_CSTR0025

    UserInputRecord:
      type: object
      description: |-
        User input record
      required:
      - triggering_event_time
      - operation_id
      - input_triggering_event
      properties:
        triggering_event_time:
          allOf:
          - $ref: '#/components/schemas/Time'
          description: Time in which user input was received by the USS
        operation_id:
          allOf:
          - $ref: '#/components/schemas/EntityID'
          description: ID of the operation ID pertaining to the user input
        input_triggering_event:
          type: string
          description: |-
            Requirement ID that pertains to the given notification
          enum:
          - TEMP_CNFM0085

    GeoZone:
      type: object
      description: |-
        An airspace of defined dimensions, above the land areas or territorial waters of a
        State, within which a particular restriction or condition for UAS flights applies.
      required:
      - identifier
      - country
      - type
      - restriction
      - zone_authority
      properties:
        identifier:
          allOf:
          - $ref: '#/components/schemas/CodeZoneIdentifierType'
          description: |-
            A string of characters that uniquely identifies the UAS Zone within the State/Territory identified by the
            country attribute.

            Note - The UAS Zone is uniquely identified worldwide by the combination of the country and the
            identifier attributes
        country:
          allOf:
          - $ref: '#/components/schemas/CodeCountryISOType'
          description: |-
            The State that has the authority to declare the zone.

            Note - There will be no Zone belonging to two States. Not necessary to code the information that two
            zones are "in neighboring States" or "related".
        zone_authority:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/Authority'
        name:
          allOf:
          - $ref: '#/components/schemas/TextShortType'
          description: A free text name by which the zone may be known by the public
            or by the UAS community.
        type:
          allOf:
          - $ref: '#/components/schemas/CodeZoneType'
          description: |-
            An indication whether the Zone is provided with its common definition or with a customised definition,
            for a particular user.
        restriction:
          allOf:
          - $ref: '#/components/schemas/CodeRestrictionType'
          description: |-
            An indication if flying in the zone is conditional, forbidden or unrestricted.
        restriction_conditions:
          type: array
          items:
            $ref: '#/components/schemas/ConditionExpressionType'
          description: |-
            An indication of the conditions under which the zone can be used
        region:
          type: integer
          format: int32
          minimum: 0
          maximum: 65535
          description: |-
            Where applicable, identifies a region inside a State where the UAS Zone is located.

            Note 1) identified with a digit between 0-65535 (16 bit), corresponding to a list of regions pre-defined for
            each State.

            Note 2) this attribute is intended to facilitate extracting sub-sets of data, for specific regions
        reason:
          items:
            $ref: '#/components/schemas/CodeZoneReasonType'
          description: |-
            A coded indication for the reason that led to the establishment of the zone.
          maxItems: 9
        other_reason_info:
          type: string
          maxLength: 30
          description: |-
            A free text description of the reason that led to the establishment of the zone, when not covered by a
            pre-defined coded value.
        regulation_exemption:
          allOf:
          - $ref: '#/components/schemas/CodeYesNoType'
          description: |-
            This is an extension point. It allows adding additional attributes of national interest through this element.
        u_space_class:
          allOf:
          - $ref: '#/components/schemas/CodeUSpaceClassType'
          description: |-
            A code that identifies the category or class of the zone applying a "USpace concept".

            Note: Two (draft) classifications exist, one from Eurocontrol and one from CORUS. Therefore, two
            instances of this attribute are expected, one from each sub-list. This might be later replaced with
            separate attributes and separate lists of values.
        message:
          allOf:
          - $ref: '#/components/schemas/TextShortType'
          description: |-
            A message to be displayed to the user of the zone, typically on the RPS for the Remote Pilot, to make
            him/her aware about specific information associated with the zone (typically when it is not only a
            restriction to fly in the zone, thus not only an alert or an automatic limitation, for example : “image capture
            prohibited in this zone”, “frequent strong winds in this zone”, “no landing or take-off in this zone”). This
            message is also used to indicate exemptions from regulation in a zone (see below). Several information
            can be grouped in a message, separated by a “/”.
        additional_properties:
          type: object
          default:
          description: |-
            Indicates that exemptions from the national or European regulations are allowed in the UAS Zone, that
            will be detailed via the "message" property.

    CodeZoneIdentifierType:
      type: string
      maxLength: 7
      description: |-
        a string of maximum 7 characters that uniquely identifies the area within
        a geographical scope.

        NOTE (1): This shall not include the country identifier, which is a separate attribute of
        the UAS Zone.

        NOTE (2): The length of this data type is limited to 7 characters for compatibility with
        ARINC 424 and AIXM, where an airspace designator may have maximum
        10 characters. The 10 characters are the result of concatenating the UAS
        Zone attributes for country and identifier.

    CodeCountryISOType:
      type: string
      minLength: 3
      maxLength: 3
      description: |-
        A 3 letter identifier of a country or territory using the ISO 3166-1 alpha-3 standard.

        NOTE: The ISO 3-letter country codes come with the following advantages:
              - allow to distinguish between remote territories and mainland
              - are unique, unlike the ICAO Country codes where the same State
                could have two or more codes
              - are also used in military standards, such as NATO STANAG 1059
                INT, which come with well document additions that might be also
                useful for UAS areas.

    CodeZoneType:
      type: string
      description: |-
        A coded list of values which allows indicating that the definition of a UAS Zone is
        specifically customised for a particular UAS or operator.
      enum:
      - COMMON
      - CUSTOMIZED
      - PROHIBITED
      - REQ_AUTHORISATION
      - CONDITIONAL
      - NO_RESTRICTION

    ConditionExpressionType:
      type: string
      maxLength: 10000
      description: |-
        A coded expression that provides information about what is authorised / forbidden in a
        zone that has conditional access.

        By difference with the “Message” field per zone, this coded expression is made to be
        interopreted by the UAS while the “Message” is to interpreted by the remote pilot.

        NOTE: the maximum field length is 10 000 characters.

        ---------------------- Condition definition language ----------------
        • A list of relevant characteristics (CHARTYPE) has first to be established per state,
        and their finite list of acceptable values (CHARVAL)
        • Each chartype and charval fields are defined by a limited set of characters
        • A public document shall give the definitions of each, and provide the reference to
        legal or technical characteristics implied
        • The Geozone editor per state can use these characteristics, with the dedicated
        condition language defined below, to define exact conditions per zone
        • Each UAS Geofencing function shall be loaded with the corresponding
        chararacteristic status of the UAS for the intended flight, so as to be able to apply
        the conditions , either to generate alerts or to limit the flight
        • If the value of a given characteristic of the condition equation is not defined in
        the UAS, the UAS Geofencing function should inform the pilot in Geoawareness
        alerting or consider that the zone is forbidden, by default in automatic
        Geofencing.

        A conditional expression shall be of the following type:
        • The UAS is PERMITTED XOR PROHIBITED (exclusive choice) to fly in this zone
        at this time IF (Characteristic1) CHARTYPE1 = (Value1) CHARVAL1 AND
        CHARTYPE 2 = CHARVAL 2 AND ... AND End IF
        OR (...)
        ...
        End OR

        • Only the fields in bold need to be edited in the character string, separated by”/”.
        Others are implicit.

        Examples of CHARTYPE and CHARVALUE:
        • CHARTYPE: operator type; Acceptable CHARVAL values:
          Military/Police/Firefighting
        • CHARTYPE: Operator ID (registration number); Acceptable CHARVAL values:
          as per registration format
        • CHARTYPE: Operation type: A1 as per EASA Open Types or S1 (National
          standard Scenario 1), STS01 (EASA Specific standard scenario) or ...
        • CHARTYPE: UTM operation type: Planned/Unplanned,
        • CHARTYPE: passengers on board: yes /no
          Note that it is possible in each national catalog of chartype and charval items, to define
        complex categories of operation/drone /equipment. Example: In nation A, we may have
          a type “drone level” with values Low, Medium, High. Each level corresponds to a defined
          set of required UAS performance/operation features/ operator qualification etc. This
          avoids to code a complex combination in the geozone database.
          This conditional expression can also be used to code a prohibition of image capture in
          a zone.
        Example: PERMITTED/IMAGE CAPTURE=NO/NOISE
          CLASS=A/OR/OPERATOR=POLICE
        Meaning: the fight is permitted in this zone at that time if No image is captured
          (removed or deactivated) and if noise class = class A (following a known classification)
          or if the UAS operator is the Police

    CodeRestrictionType:
      type: string
      description: |-
        An indication if flying in the zone is conditional, forbidden or unrestricted.

    CodeZoneReasonType:
      type: string
      description: |-
        A coded indication of a reason that justifies the existence of an UAS Zone
      enum:
      - AIR_TRAFFIC
      - SENSITIVE
      - PRIVACY
      - POPULATION
      - NATURE
      - NOISE
      - FOREIGN_TERRITORY
      - EMERGENCY
      - OTHER

    CodeUSpaceClassType:
      type: string
      maxLength: 100
      description: |-
        A coded identifier for a category or class of the zone applying a "USpace concept".

        NOTE: In the current model version, there is no specific list of values. For example,
        the “X”, “Y”, “Z” types of zones as per SESAR JU Corus project on USpace
        concept of operation could be used in a future version. Until a precise list
        of values is defined, this data type will be considered as string of characters
        of maximum 100 characters.

    CodeYesNoType:
      type: string
      description: |-
        A coded value that indicates a choice between a positive (yes) or a negative (no)
        applicability.
      enum:
      - YES
      - NO

    Authority:
      type: object
      description: |-
        A relevant authority that is in charge for authorising, being notified or providing
        information for UAS operations in the UAS zone.

        Rule: at least one of the following shall be specified - siteURL, email, phone.
      properties:
        name:
          allOf:
          - $ref: '#/components/schemas/TextShortType'
          description: |-
            The official name of a public or private authority
        service:
          allOf:
          - $ref: '#/components/schemas/TextShortType'
          description: |-
            The name of a specific department or service within the organisation
        contact_name:
          allOf:
          - $ref: '#/components/schemas/TextShortType'
          description: |-
            The name or role of a specific person that needs to be contacted within the organisation
        site_url:
          allOf:
          - $ref: '#/components/schemas/TextShortType'
          description: |-
            The URL of the public internet site through which the organisation may be contacted

            Note: in the data coding format, this might be further constrained in order to ensure a valid URL format.
        email:
          allOf:
          - $ref: '#/components/schemas/TextShortType'
          description: |-
            The e-mail address by which the organisation may be contacted.

            Note: in the data coding format, this might be further constrained in order to ensure a valid e-mail
            format.
        phone:
          allOf:
          - $ref: '#/components/schemas/TextShortType'
          description: |-
            A phone number at which the organisation may be contacted

    AuthorityRequirements:
      type: object
      properties:
        purpose:
          allOf:
          - $ref: '#/components/schemas/CodeAuthorityRole'
          description: |-
            The role of the Authority in relation with the zone.
        interval_before:
          type: string
          description: |-
            The minimal time interval required between notification or authorization request and starting to operate
            in the zone, in the format PnnDTnnHnnM (ISO 8601).

    CodeAuthorityRole:
      type: string
      description: |-
        A coded list of values indicating the role that an authority has in relation with the UAS
        zone.
      enum:
      - AUTHORIZATION
      - NOTIFICATION
      - INFORMATION

    TextShortType:
      type: string
      maxLength: 200
      description: A free text with a maximum length of 200 characters

paths:
  #
  # DSS Endpoint: OPERATIONS
  #

  /dss/v1/operation_references/query:
    summary: Query all Operations in the DSS that intersect with a specified geographic
      area, altitude-range, and time-range.
    description: Interface to Operation references in the DSS.

    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchOperationReferenceParameters'
        required: true
      tags:
      - Operation references
      - dss
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Retrieve all Operation references in the specified area/volume/time
        from the DSS.
      operationId: searchOperationReferences
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchOperationReferenceResponse'
          description: Operations were successfully retrieved.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/operation_references/{entityid}:
    summary: Create/read endpoint for a specified Operation reference in the DSS.
    parameters:
    - name: entityid
      description: EntityID of the Operation.
      schema:
        $ref: '#/components/schemas/EntityID'
      in: path
      required: true

    get:
      tags:
      - Operation references
      - dss
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Retrieve the specified Operation reference from the DSS.
      operationId: getOperationReference
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationReferenceResponse'
          description: Operation reference was retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationReferenceParameters'
        required: true
      tags:
      - Operation references
      - dss
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Create the specified Operation reference in the DSS.
      operationId: createOperationReference
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: An Operation reference was created successfully in the DSS.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        '412':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            The client attempted to transition the Operation to Accepted or Activated while marked as Down in the DSS.
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/operation_references/{entityid}/{ovn}:
    summary: Update endpoint for a specified Operation reference in the DSS.
    parameters:
    - name: entityid
      description: EntityID of the Operation.
      schema:
        $ref: '#/components/schemas/EntityID'
      in: path
      required: true
    - name: ovn
      description: Opaque version number of the existing Operation reference.
      schema:
        $ref: '#/components/schemas/EntityOVN'
      in: path
      required: true

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationReferenceParameters'
        required: true
      tags:
      - Operation references
      - dss
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Update the specified Operation reference in the DSS.
      operationId: updateOperationReference
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: An Operation reference was updated successfully in the DSS.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirspaceConflictResponse'
          description: |-
            * The provided key did not prove knowledge of all current and relevant airspace Entities
            * The provided `ovn` does not match the current version of the existing Operation.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        '412':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            The client attempted to transition the Operation to Accepted or Activated while marked as Down in the DSS.
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    delete:
      tags:
      - Operation references
      - dss
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Remove the specified Operation reference from the DSS.
      operationId: deleteOperationReference
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeOperationReferenceResponse'
          description: The specified Operation was successfully removed from the DSS.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Operation in a disallowed way.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The provided `ovn` does not match the current version of the existing Operation.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        '412':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            The client attempted to delete the Operation while marked as Down in the DSS.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # DSS Endpoint: CONSTRAINTS
  #

  /dss/v1/constraint_references/query:
    summary: Query all Constraint references in the DSS that intersect with a specified
      area/volume/time.
    description: ''

    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchConstraintReferenceParameters'
        required: true
      tags:
      - Constraint references
      - dss
      security:
      - Authority:
        - utm.constraint_management
      - Authority:
        - utm.constraint_ingestion
      summary: Retrieve all Constraints references in the specified area/volume from
        the DSS.
      operationId: queryConstraintReferences
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchConstraintReferencesResponse'
          description: Constraints were successfully retrieved.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/constraint_references/{entityid}:
    parameters:
    - name: entityid
      description: EntityID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityID'
      in: path
      required: true
    summary: Create/read endpoint for a specified Constraint reference in the DSS.

    get:
      tags:
      - Constraint references
      - dss
      security:
      - Authority:
        - utm.constraint_management
      - Authority:
        - utm.constraint_ingestion
      summary: Retrieve the specified Constraint reference from the DSS.
      operationId: getConstraintReference
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintReferenceResponse'
          description: Constraint reference was retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintReferenceParameters'
        required: true
      tags:
      - Constraint references
      - dss
      security:
      - Authority:
        - utm.constraint_management
      summary: Create the specified Constraint reference in the DSS.
      operationId: createConstraintReference
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: A Constraint reference was created successfully in the DSS.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Constraint in a disallowed way.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Constraint with the provided ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Constraint is too large.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/constraint_references/{entityid}/{ovn}:
    parameters:
    - name: entityid
      description: EntityID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityID'
      in: path
      required: true
    - name: ovn
      description: Opaque version number of the existing Operation reference.
      schema:
        $ref: '#/components/schemas/EntityOVN'
      in: path
      required: true
    summary: Update/delete endpoint for a specified Constraint reference in the DSS.

    put:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintReferenceParameters'
        required: true
      tags:
      - Constraint references
      - dss
      security:
      - Authority:
        - utm.constraint_management
      summary: Update the specified Constraint reference in the DSS.
      operationId: putConstraintReference
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: A Constraint reference was updated successfully in the DSS.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Constraint in a disallowed way.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The provided `ovn` does not match the current version of the existing Constraint.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The area of the Operation is too large.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    delete:
      tags:
      - Constraint references
      - dss
      security:
      - Authority:
        - utm.constraint_management
      summary: Delete the specified Constraint reference from the DSS.
      operationId: deleteConstraintReference
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangeConstraintReferenceResponse'
          description: The Constraint was successfully removed from the DSS.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Constraint in a disallowed way.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The provided `ovn` does not match the current version of the existing Constraint.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # DSS Endpoint: SUBSCRIPTIONS
  #

  /dss/v1/subscriptions/query:
    summary: Subscriptions for airspace updates to a volume of interest.

    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchSubscriptionParameters'
        required: true
      tags:
      - Subscriptions
      - dss
      security:
      - Authority:
        - utm.constraint_ingestion
      - Authority:
        - utm.strategic_coordination
      description: |-
        Retrieve Subscriptions intersecting an area of interest.  Subscription
        notifications are only triggered by (and contain full information of) changes to,
        creation of, or deletion of, Entities referenced by or stored in the DSS;
        they do not involve any data transfer (such as remote ID telemetry updates) apart
        from Entity information.

        Note that this parameter is a JSON object (in the 'request-body'). Note that either
        or both of the 'altitude' and 'time' values may be omitted from this parameter.

        Only Subscriptions belonging to the caller are returned.  This endpoint would be
        used if a USS lost track of Subscriptions they had created and/or wanted to resolve
        an error indicating that they had too many existing Subscriptions in an area.
      summary: Retrieve all Subscriptions in the specified area/volume from the DSS.
      operationId: querySubscriptions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchSubscriptionsResponse'
          description: Subscriptions were retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '413':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested area was too large.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /dss/v1/subscriptions/{subscriptionid}:
    summary: Create/read endpoint for a specific Subscription in the DSS.
    parameters:
    - name: subscriptionid
      description: SubscriptionID of the subscription of interest.
      schema:
        $ref: '#/components/schemas/SubscriptionID'
      in: path
      required: true

    get:
      tags:
      - Subscriptions
      - dss
      security:
      - Authority:
        - utm.constraint_ingestion
      - Authority:
        - utm.strategic_coordination
      summary: Retrieve the specified Subscription from the DSS.
      operationId: getSubscription
      description: |-
        Retrieve a specific subscription.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSubscriptionResponse'
          description: Subscription information was retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    put:
      security:
      - Authority:
        - utm.constraint_ingestion
      - Authority:
        - utm.strategic_coordination
      summary: Create the specified Subscription in the DSS.
      operationId: createSubscription
      description: |-
        Create a subscription.

        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      tags:
      - Subscriptions
      - dss
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: A new Subscription was created successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Subscription in a disallowed way.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * Client attempted to request notifications for an Entity type to which the scopes included in the access token do not provide access.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Subscription with the specified ID already exists.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client may have issued too many requests within a small
            period of time.

  /dss/v1/subscriptions/{subscriptionid}/{version}:
    summary: Update/delete a specific Subscription in the DSS.
    parameters:
    - name: subscriptionid
      description: SubscriptionID of the subscription of interest.
      schema:
        $ref: '#/components/schemas/SubscriptionID'
      in: path
      required: true
    - name: version
      description: Version of the Subscription to be modified.
      schema:
        type: string
      in: path
      required: true

    put:
      security:
      - Authority:
        - utm.constraint_ingestion
      - Authority:
        - utm.strategic_coordination
      summary: Update the specified Subscription in the DSS.
      operationId: updateSubscription
      description: |-
        Update a subscription.

        Subscription notifications are only triggered by (and contain full information of) changes to, creation of, or deletion of, Entities referenced by or stored in the DSS; they do not involve any data transfer (such as remote ID telemetry updates) apart from Entity information.

        The standard requires each Operation to have a Subscription that cover the 4D volume of the Operation.  If a USS attempts to update a Subscription upon which an Operation depends, and this update would cause the Operation to lose Subscription coverage, the update will be rejected by the DSS as a bad request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutSubscriptionParameters'
        required: true
      tags:
      - Subscriptions
      - dss
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutSubscriptionResponse'
          description: A Subscription was updated successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more input parameters were missing or invalid.
            * The request attempted to mutate the Subscription in a disallowed way.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
            * Client attempted to request notifications for an Entity type to which the scopes included in the access token do not provide access.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Subscription with the specified ID already exists and is owned by a different client.
            * The provided `version` does not match the current Subscription.
            * Despite repeated attempts, the DSS was unable to complete the update because of other simultaneous changes.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client may have issued too many requests within a small
            period of time.

    delete:
      tags:
      - Subscriptions
      - dss
      security:
      - Authority:
        - utm.constraint_ingestion
      - Authority:
        - utm.strategic_coordination
      summary: Remove the specified Subscription from the DSS.
      operationId: deleteSubscription
      description: |-
        The standard requires each Operation to have a Subscription that cover the 4D volume of the Operation.  If a USS attempts to delete a Subscription upon which an Operation depends, the deletion will be rejected by the DSS as a bad request.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSubscriptionResponse'
          description: Subscription was successfully removed from DSS.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: A Subscription with the specified ID was not found.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * A Subscription with the specified ID is owned by a different client.
            * The provided `version` does not match the current Subscription.
            * Despite repeated attempts, the DSS was unable to complete the deletion because of other simultaneous changes.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # DSS Endpoint: REPORT
  #

  /dss/v1/reports:
    summary: Error reports of potential operational issues relevant to DSSs.

    post:
      security:
      - Authority:
        - utm.constraint_management
      - Authority:
        - utm.constraint_ingestion
      - Authority:
        - utm.strategic_coordination
      summary: Report information about communication issues to a DSS.
      operationId: makeDssReport
      description: Report issues to a DSS. Data sent to this endpoint is archived.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
        required: true
      tags:
      - Reports
      - dss
      responses:
        '201':
          description: A new Report was created successfully (and archived).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The report could not be parsed, or contains unrecognized data.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # DSS Endpoint: USS AVAILABILITY
  #

  /dss/v1/uss_availability/{uss_id}:
    summary: Availability status of a USS
    parameters:
    - name: uss_id
      description: Client ID (matching their `sub` in access tokens) of the USS to
        which this availability applies.
      schema:
        type: string
      in: path
      required: true

    put:
      security:
      - Authority:
        - utm.availability_arbitration
      summary: Set availability status of a USS.
      operationId: setUssAvailability
      description: Set availability status of a USS.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUssAvailabilityStatusParameters'
        required: true
      tags:
      - Availability
      - dss
      responses:
        '200':
          description: Availability status of specified USS was successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UssAvailabilityStatusResponse'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

    get:
      security:
      - Authority:
        - utm.availability_arbitration
      - Authority:
        - utm.strategic_coordination
      summary: Get availability status of a USS.
      operationId: getUssAvailability
      description: Get availability status of a USS.
      tags:
      - Availability
      - dss
      responses:
        '200':
          description: Availability status of specified USS was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UssAvailabilityStatusResponse'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint or the request.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # USS Endpoint: OPERATIONS
  #

  /uss/v1/operations/{entityid}:
    summary: Query detailed information of an Operation from a USS.
    parameters:
    - name: entityid
      description: EntityID for this Operation.
      schema:
        $ref: '#/components/schemas/EntityID'
      in: path
      required: true

    get:
      tags:
      - Operation details
      - p2p_utm
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Retrieve the specified Operation details from a USS.
      description: |-
        The USS hosting this endpoint returns the details (and reference) of an
        Operation it owns.  While the USS has a pending request to change the
        Operation in the DSS, the USS should report the most recent version the
        USS knows was accepted by the DSS.  So, before a USS receives a response
        to create an Operation reference in the DSS, it should return 404 if
        queried for that Operation at this endpoint.
      operationId: getOperationDetails
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationDetailsResponse'
          description: Operation details were retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /uss/v1/operations/{entityid}/telemetry:
    summary: Detailed information on the position of an off-nominal Operation.
    parameters:
    - name: entityid
      description: EntityID for this Operation.
      schema:
        $ref: '#/components/schemas/EntityID'
      in: path
      required: true

    get:
      tags:
      - Operation details
      - p2p_utm
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Query detailed information on the position of an off-nominal Operation
        from a USS.
      operationId: getOperationTelemetry
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOperationTelemetryResponse'
          description: Operation telemetry details were retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '412':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: No telemetry data is available.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Operation is not in a state that provides telemetry.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /uss/v1/operations:
    summary: A USS's representation of detailed information about Operations.

    post:
      tags:
      - Operation details
      - p2p_utm
      security:
      - Authority:
        - utm.strategic_coordination
      summary: Notify a peer USS of changed Operation details.
      operationId: notifyOperationDetailsChanged
      description: Notify a peer USS directly of changed Operation details (usually
        as a requirement of previous interactions with the DSS).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutOperationDetailsParameters'
        required: true
      responses:
        '204':
          description: New or updated full Operation information received successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # USS Endpoint: CONSTRAINTS
  #

  /uss/v1/constraints/{entityid}:
    summary: Query detailed information of a Constraint from a USS.
    parameters:
    - name: entityid
      description: EntityID of the Constraint.
      schema:
        $ref: '#/components/schemas/EntityID'
      in: path
      required: true

    get:
      tags:
      - Constraint details
      - p2p_utm
      security:
      - Authority:
        - utm.constraint_ingestion
      summary: Retrieve the specified Constraint details from a USS.
      operationId: getConstraintDetails
      description: |-
        The USS hosting this endpoint returns the details (and reference) of a
        Constraint it owns.  While the USS has a pending request to change the
        Constraint in the DSS, the USS should report the most recent version the
        USS knows was accepted by the DSS.  So, before a USS receives a response
        to create a Constraint reference in the DSS, it should return 404 if
        queried for that Constraint at this endpoint.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetConstraintDetailsResponse'
          description: Constraint details were retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested Entity could not be found.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  /uss/v1/constraints:
    summary: A USS's representation of detailed information about Constraints.

    post:
      tags:
      - Constraint details
      - p2p_utm
      security:
      - Authority:
        - utm.constraint_management
      summary: Notify a peer USS of changed Constraint details.
      operationId: notifyConstraintDetailsChanged
      description: Notify a peer USS directly of changed Constraint details (usually
        as a requirement of previous interactions with the DSS).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutConstraintDetailsParameters'
        required: true
      responses:
        '204':
          description: New or updated full Constraint information received successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The Entity could not be parsed, or contains illegal data.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
            * The client identified in the access token is not the owner of this Entity according to the receiving client's records.
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The Entity version specified in this message is lower than
            a previously-received notification, or identical to a previously-received
            notification and the Entity is different.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.

  #
  # USS Endpoint: REPORT
  #

  /uss/v1/reports:
    summary: Error reports of issues communicating with a peer USS.

    post:
      tags:
      - Reports
      - p2p_utm
      security:
      - Authority:
        - utm.strategic_coordination
      - Authority:
        - utm.constraint_ingestion
      - Authority:
        - utm.constraint_management
      summary: Notify USS of an error encountered that might otherwise go unnoticed.
      operationId: makeUssReport
      description: Endpoint to provide feedback (errors, etc.) that might otherwise
        go unnoticed by this USS.  This endpoint is used for all feedback related
        to Operations and Constraints.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ErrorReport'
        required: true
      responses:
        '201':
          description: Report received and successfully archived.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorReport'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * One or more parameters were missing or invalid.
            * The report could not be parsed, or contains unrecognized data.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: |-
            * The access token was decoded successfully but did not include a scope appropriate to this endpoint.
        '429':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The client issued too many requests in a short period of time.
